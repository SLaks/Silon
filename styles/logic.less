@import "_theme";
@import "_combinators";

// Simple Gates
.coloredOp(~'#simple-xor-a', xor, ~'#simple-xor-b', simple-xor-gate);
.coloredOp(~'#simple-and-a', and, ~'#simple-and-b', simple-and-gate);
.coloredOp(~'#simple-or-a', or, ~'#simple-or-b', simple-or-gate);

// Half Adder
.coloredOp(~'#half-adder-a', xor, ~'#half-adder-b', half-adder-xor-gate);
.coloredOp(~'#half-adder-a', and, ~'#half-adder-b', half-adder-and-gate);

// Full adder
.coloredOp(
	{ .c(@c) { .coloredOp(@c, ~'#full-adder-a', and, ~'#full-adder-b', full-adder-and-gate-input) } },
	or,
	{ .c(@c) { .coloredOp(@c,
		~'#full-adder-carry',
		and,
		{ .c(@c) { .coloredOp(@c, ~'#full-adder-a', xor, ~'#full-adder-b', full-adder-xor-gate-input); } },
		full-adder-and-gate-sum
	); } }, 
	full-adder-or-gate-carry-out
);

.coloredOp(
	~'#full-adder-carry', xor,
	{ .c(@c) { .coloredOp(@c, ~'#full-adder-a', xor, ~'#full-adder-b', none); } },
	full-adder-xor-gate-carry
);