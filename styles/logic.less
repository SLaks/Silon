@import "_theme";
@import "_combinators";

// Simple Gates
.coloredOp(simple-xor-a, xor, simple-xor-b, simple-xor-gate);
.coloredOp(simple-and-a, and, simple-and-b, simple-and-gate);
.coloredOp(simple-or-a, or, simple-or-b, simple-or-gate);

// Half Adder
.coloredOp(half-adder-a, xor, half-adder-b, half-adder-xor-gate);
.coloredOp(half-adder-a, and, half-adder-b, half-adder-and-gate);

// Full adder
.fullAdder(@c, @prefix, @carryIn) {
	@prefixFormat: %(~'#%s-%%s', @prefix);
	.coloredOp(@c,
		{ .c(@c) { .coloredOp(@c, %(@prefixFormat, a), and, %(@prefixFormat, b), %(@prefixFormat, and-gate-input)) } },
		or,
		{ .c(@c) { .coloredOp(@c,
			@carryIn,
			and,
			{ .c(@c) { .coloredOp(@c, %(@prefixFormat, a), xor, %(@prefixFormat, b), %(@prefixFormat, xor-gate-input)); } },
			%(@prefixFormat, and-gate-sum)
		); } }, 
		%(@prefixFormat, or-gate-carry-out)
	);
}

.fullAdder(@mode, @prefix, @carryIn) when (@mode = root), (@mode = probe) {
	@prefixFormat: %(~'#%s-%%s', @prefix);
	.coloredOp(
		@carryIn, xor,
		{ .c(@c) { .coloredOp(@c, %(@prefixFormat, a), xor, %(@prefixFormat, b), none); } },
		%(@prefixFormat, xor-gate-carry)
	);
}

.fullAdder(root, full-adder, full-adder-carry);
