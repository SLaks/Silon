@import "_theme";
@import "_combinators";

// Simple Gates
.op(~'#simple-xor-a', xor, ~'#simple-xor-b', {
	~#simple-xor-gate {
		.On();
	}
});

.op(~'#simple-and-a', and, ~'#simple-and-b', {
	~ #simple-and-gate {
		.On();
	}
});

.op(~'#simple-or-a', or, ~'#simple-or-b', {
	~ #simple-or-gate {
		.On();
	}
});

// Half Adder
.op(~'#half-adder-a', xor, ~'#half-adder-b', {
	~#half-adder-xor-gate {
		.On();
	}
});

.op(~'#half-adder-a', and, ~'#half-adder-b', {
	~#half-adder-and-gate {
		.On();
	}
});

// Full adder
.op(~'#full-adder-a', and, ~'#full-adder-b', {
	~#full-adder-and-gate-input {
		.On();
	}
});

.op(~'#full-adder-a', xor, ~'#full-adder-b', {
	~#full-adder-xor-gate-input {
		.On();
	}
});

.op(
	~'#full-adder-carry', and,
	{ .op(~'#full-adder-a', xor, ~'#full-adder-b'); }, {
		~#full-adder-and-gate-sum {
			.On();
		}
	}
);

.op(
	{ .op(~'#full-adder-a', and, ~'#full-adder-b') },
	or,
	{ .op(
		~'#full-adder-carry',
		and,
		{ .op(~'#full-adder-a', xor, ~'#full-adder-b'); }
	); }, {
		~#full-adder-or-gate-carry-out {
			.On();
		}
	}
);

.op(
	~'#full-adder-carry', xor,
	{ .op(~'#full-adder-a', xor, ~'#full-adder-b'); }, {
		~#full-adder-xor-gate-carry {
			.On();
		}
	}
);